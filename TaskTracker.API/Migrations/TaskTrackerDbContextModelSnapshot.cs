// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskTracker.Infrastructure;

#nullable disable

namespace TaskTracker.API.Migrations
{
    [DbContext(typeof(TaskTrackerDbContext))]
    partial class TaskTrackerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("HeadAssignemtId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Worker")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeadAssignemtId");

                    b.ToTable("work_assignments", (string)null);
                });

            modelBuilder.Entity("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignmentRelationship", b =>
                {
                    b.Property<int>("Relation")
                        .HasColumnType("int");

                    b.Property<int>("SourceWorkAssignmentId")
                        .HasColumnType("int");

                    b.Property<int>("TargetWorkAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Relation", "SourceWorkAssignmentId", "TargetWorkAssignmentId");

                    b.HasIndex("SourceWorkAssignmentId");

                    b.HasIndex("TargetWorkAssignmentId");

                    b.HasIndex("Relation", "SourceWorkAssignmentId", "TargetWorkAssignmentId")
                        .IsUnique();

                    b.ToTable("work_assignments_relationships", (string)null);
                });

            modelBuilder.Entity("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", b =>
                {
                    b.HasOne("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", "HeadAssignment")
                        .WithMany("SubAssignment")
                        .HasForeignKey("HeadAssignemtId");

                    b.Navigation("HeadAssignment");
                });

            modelBuilder.Entity("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignmentRelationship", b =>
                {
                    b.HasOne("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", "SourceWorkAssignment")
                        .WithMany("OutRelations")
                        .HasForeignKey("SourceWorkAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", "TargetWorkAssignment")
                        .WithMany("InRelations")
                        .HasForeignKey("TargetWorkAssignmentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SourceWorkAssignment");

                    b.Navigation("TargetWorkAssignment");
                });

            modelBuilder.Entity("TaskTracker.Domain.Aggregates.WorkAssignment.WorkAssignment", b =>
                {
                    b.Navigation("InRelations");

                    b.Navigation("OutRelations");

                    b.Navigation("SubAssignment");
                });
#pragma warning restore 612, 618
        }
    }
}
